Crewer is a SaaS application designed to simplify and centralize the scheduling, management, and coordination of crew members, TV shows, production teams, and resources (such as control rooms and studios). The app provides real-time visibility and metrics into crew availability, assignments, and resource use, allowing production managers to plan, staff, and adjust schedules with ease.
Each show is a unique scheduled event. It will require specific job roles (like Technical Director or Camera Operator), which must be filled by qualified crew members. Shows also require the assignment of resources such as studios, control rooms, and equipment.
The system must be multi-tenant, with each workspace having its own siloed data, including users, shows, jobs, crew, and resources. Later in development, we will add support for authentication, authorization, and RBAC, but to begin with, the focus should be on building and testing the core data structure and UI as a manager.
üîß Functional Requirements:
-Define and manage workspaces
-Create and categorize shows using flexible tagging
-Assign required job roles to each show
-Assign qualified crew members to required jobs
-Assign one or more resources to each show
-Support multiple studios, control rooms, or equipment per show
-Detect and prevent conflicts in: Crew member availability, Resource usage overlap (e.g., double-booked control rooms), and Crew time off or outside work hours
-Define crew availability schedules and time off
‚öôÔ∏è Development Order:
üß± Phase 1: Schema + Core Entities
-Define database schema using UUIDs for: workspace, user, crew_member, job, crew_member_job, show, required_job, resource, show_resource, crew_schedule, crew_time_off, show_category, show_category_assignment, and notifications.
Phase 2: UI
-Build pages (Dashboard, Notifications, Calendar, Shows with Calendar View/List View, Show Builder, Crew Members, Crew Schedule, Jobs, Resources, Reports, Settings)
-Dynamic, context-aware navigation bar (breadcrumb-style navigation structure)